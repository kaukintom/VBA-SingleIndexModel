Option Explicit

Const Tablebegin = 7
'When changing the where the table begins, make sure to add a space manually _
between the table and the data above it so it begins at row = 5
Const ColBegin = 1
'Const ColCSV = 8
Const SDRowBegin = 3

Sub TickerDataCollect()
Dim SDSheet As Worksheet
Dim HistData As Variant
Dim html As Variant
Dim ScrollDown As Integer, Trow As Integer
Dim Div As Integer, Stock As String
Dim Row As Integer, Col As Integer
Dim Tlist As Variant, SLSheet As Worksheet
Dim TData As Variant, TlistI As Variant, Tcol As Integer
Dim BSLrow As Integer, GSLrow As Integer, Inclusion As Integer
Dim APIkey As Variant, STable As Worksheet, Class As Integer
Dim Clist As Variant, Crow As Integer, CorT As Boolean, Allper As Integer
Dim UpperDate As String, LowerDate As String, LDArray As Variant, DateArray As Variant
Dim PrevDate As Integer, SkipDate As Boolean, CutoffDate As String
Dim CurrentPArray As Variant, Price As Double, PDSheet As Worksheet

Dim StartTime As Double
Dim SecondsElapsed As Double
StartTime = Timer
'reference point for locations on worksheet
'*******************************
Row = 1
Col = 1
Inclusion = 3 ' column location to determine whether the stock data was found
Class = 2 'column containing the index for the stock
'******************************

Application.ScreenUpdating = False
Application.Calculation = xlManual

'define worksheet objects
Set SDSheet = Sheets("Stock Data")
Set SLSheet = Sheets("Stock List")
Set PDSheet = Sheets("Price Data")
'Set STable = Sheets("Stock Table")

Allper = SLSheet.Cells(4, 2) ' allocation period (months)

APIkey = SLSheet.Cells(Row, Col + 1).Value 'Alpha Vantage API key
If IsEmpty(APIkey) = False Then
    SLSheet.Cells(4, 2).Interior.Color = RGB(255, 255, 255)
    SDSheet.Select
    ReDim Clist(1 To 1, 1 To 1) 'define array of the index used
    
    SLSheet.Select
    Tlist = SLSheet.Cells(Tablebegin, Col).CurrentRegion ' Array of Ticker symbols for securities
    
    ReDim CurrentPArray(LBound(Tlist) To UBound(Tlist, 1), LBound(Tlist) To 2)
    CurrentPArray(LBound(CurrentPArray), LBound(CurrentPArray)) = "Symbol"
    CurrentPArray(LBound(CurrentPArray), UBound(CurrentPArray, 2)) = "Current Price"
    
    
    Range(Cells(Tablebegin + 1, Inclusion), Cells(UBound(Tlist, 1) + Tablebegin, Inclusion)).ClearContents 'clear _
    the current tables contents in the inclusion column
    
    SDSheet.Select
    SDSheet.UsedRange.Delete 'clear worksheet
    'For each security, download the historical prices from Alpha Vantage
    CorT = True ' If true, the stock data is found and recorded
    
    'Loops through each stock
    For Trow = LBound(Tlist) + 1 To UBound(Tlist, 1)
        Stock = Tlist(Trow, 1) 'Stock symbol
        'Finds the stock data
        Call StockClose(APIkey, Stock, Tlist, Trow, CorT, Inclusion, SDSheet, Row, Col, Price)
        'Adds stock symbol and most recent price value to an array
        CurrentPArray(Trow, 1) = Stock
        CurrentPArray(Trow, 2) = Price

    Next Trow
    
    'Gathers the indexes used for each stock (Will only be one)
    'Loops through each row of stocks with their associated index
    For Trow = LBound(Tlist, 1) + 1 To UBound(Tlist, 1)
        'If the stock will be included in the portoflio calculation
        If IsEmpty(Clist(LBound(Clist, 1), 1)) = False And Tlist(Trow, Inclusion) = "Y" Then
            'Checks to see if the index is already contained in the array
            For Crow = LBound(Clist, 1) To UBound(Clist, 1)
                If Clist(Crow, 1) = Tlist(Trow, Class) Then
                    Exit For
                End If
                
                WorksheetFunction.Transpose (Clist) 'Transpose
                ReDim Preserve Clist(LBound(Clist, 1) To UBound(Clist, 1), LBound(Clist, 2) To UBound(Clist, 2) + 1) 'Add a column
                WorksheetFunction.Transpose (Clist) 'Then transpose again
                Clist(UBound(Clist, 1), 1) = Tlist(Trow, Class) 'Add index to the newest row
            Next Crow
        'If nothing is contained in the array containing the indexes
        ElseIf IsEmpty(Clist(LBound(Clist, 1), 1)) = True And Tlist(Trow, Inclusion) = "Y" Then
            Clist(LBound(Clist, 1), 1) = Tlist(Trow, Class) 'Adds index to the first row in the index
        End If
    Next Trow
    
    CorT = False 'Signals the switch from stock to index
    For Crow = LBound(Clist) To UBound(Clist, 1) 'Loop through the indexes
        Stock = Clist(Crow, 1) 'Index symbol
        'Finds the index data
        Call StockClose(APIkey, Stock, Tlist, Trow, CorT, Inclusion, SDSheet, Row, Col, Price)
    Next Crow
    
    'Put the Tlist table back into worksheet
    SLSheet.Cells(Tablebegin, ColBegin).Resize(UBound(Tlist), UBound(Tlist, 2)).Value = Tlist
    
    'Add small section at top of the worksheet for indexes that are used
    SLSheet.Cells(1, 4).Value = "Index"
    WorksheetFunction.Transpose (Clist) 'Transpose it to make it fit at the top and not interfere with Tlist
    SLSheet.Cells(1, 5).Resize(UBound(Clist), UBound(Clist, 2)).Value = Clist
    
    Call Delete_NoData_Cells 'deletes any pricing data, for all stocks, which contains no data
    Call Return_Variance 'finds the mean and standard deviation for each stock
    
    SLSheet.Columns.AutoFit
    SDSheet.Columns.AutoFit
    
    Call FixDates
    Call AllocationPeriod 'deletes the data deyond the allocation period
    
    PDSheet.Cells(Row, ColBegin).Resize(UBound(CurrentPArray), UBound(CurrentPArray, 2)).Value = CurrentPArray
    PDSheet.Columns.AutoFit
Else
    SLSheet.Cells(4, 2).ColorIndex = RGB(255, 0, 0)
End If

Call DeleteExistingPortfolioData

SecondsElapsed = Round(Timer - StartTime, 2)
'MsgBox SecondsElapsed

Application.ScreenUpdating = True
Application.Calculation = xlAutomatic
End Sub


Sub StockClose(APIkey, Stock, Tlist, Trow, CorT, Inclusion, SDSheet, Row, Col, Price)
'Downloads the stock data in a json format
'Parses the necessary information(Date and Close Price) from the json file

Dim intStringPosition1 As Long 'Finds the position of close prices
Dim intCursorPosition1 As Long 'Where the search begins for close price in the _
json file

Dim intCursorPosition2 As Long 'Finds the position of open price, to find the date
Dim intStringPosition2 As Long 'Where the search begins for open price in the _
json file

Dim intCursorPosition3 As Long 'Finds the position of open price, to find the date
Dim intStringPosition3 As Long 'Where the search begins for open price in the _
json file
Dim CountStringOccurances As Integer 'Keeps track of how many close prices exist _
in the json file

Dim i As Long 'Used to loop through each character in json file
Dim cols As Integer 'Defines the number of columns in the array containing _
close prices and dates
Dim StockArray As Variant 'Contains close prices and dates for a stock from the _
json file

Dim StringLookPrice As String
Dim StringLookClose As String 'Looks for specific string in json file for close price
Dim StringLookDate As String 'Looks for specific string in json file for Date
Dim StringLookEnd As String 'Looks for the last string in the json file to _
determine if it fully loads
Dim StringLookFrequ As String 'Looks for specific string in json file for when the _
api call is restricted
Dim StringLookError As String 'Looks for specific string in json file for when the _
api has no data for the stock being called

Dim SDArray As Variant 'An array created of the worksheet of stock data
Dim CPloc As Integer, Dloc As Integer, Ploc As Integer 'Where the information for close price and date are _
located in json file relative to intstringposition

Dim URL As String, json As String, xmlHTTP As Object
Dim posStart As Long, posEnd As Long, strClose As String

cols = 3 ' 1 columns for close price, date, and return

'Specific string in json file to look for to parse the necessary information
StringLookClose = "5. adjusted close"
StringLookDate = "1. open"
StringLookError = "Error Message"
StringLookEnd = "}"
StringLookFrequ = "Information"
StringLookPrice = "4. close"

'Relative positions for close price and date in json
CPloc = 21
Dloc = 28
Ploc = 12

Price = 0

'URL dependent on stock and apikey
URL = "https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=" & Stock & "&apikey=" & APIkey

'Opens the URL to grab the HTTP text and store it in a string
Set xmlHTTP = CreateObject("MSXML2.XMLHTTP")
xmlHTTP.Open "GET", URL, False
xmlHTTP.Send

'Puts text into a string
json = xmlHTTP.responseText

'This loop handles errors when the text is not retrieved
'The loop will end if there is no stock data for the particular stock _
which is found from an error message
For i = 0 To Len(json) 'Ensures no infite loop
    'Finds number of charcters in the string
    'If there are very few, likely an error message exists
    If Len(json) < 1000 Then
        intStringPosition1 = InStr(1, json, StringLookError) 'Looks specifically for Error message
        intStringPosition2 = InStr(1, json, StringLookFrequ) 'Looks for restriction of api call message

        'If the error message exists then the loop can be ended since _
        no stock data exists
        If intStringPosition1 <> 0 Then
            Exit For
        'If the information message exists then resend the HTTP request to get the stock data
        ElseIf intStringPosition2 <> 0 Then
            Set xmlHTTP = Nothing 'End current request
            Application.Wait (Now + TimeValue("0:00:02")) 'Briefly wait to send request
            'Send request and put the response back into string variable
            Set xmlHTTP = CreateObject("MSXML2.XMLHTTP")
            xmlHTTP.Open "GET", URL, False
            xmlHTTP.Send
            json = xmlHTTP.responseText
        End If
    'It's possible the entire file is not retrieved so this checks to see if the expected _
    last string exists
    Else
        'Expected last string, can exit loop
        If Right(json, 1) = StringLookEnd Then
            Exit For
            'Otherwise put the HTTP test into json variable again
        Else
            json = xmlHTTP.responseText
        End If
    End If
Next i

'End request
Set xmlHTTP = Nothing

CountStringOccurances = 0 'Counts occurances of close prices

intCursorPosition1 = 1 'Finds position of close price
intCursorPosition2 = 1 'Finds position of Date

'Finds number of charcters in the string
'If there are many characters, likely entire json file retrieved
If Len(json) > 10000 Then
    For i = 0 To Len(json) 'Ensures no infite loop
        intStringPosition1 = InStr(intCursorPosition1, json, StringLookClose) 'looks for Close Price _
        given a starting point
        
        If intStringPosition1 = 0 Then ' When all the clcose prices are found, the loop can end
            Exit For
        Else
            CountStringOccurances = CountStringOccurances + 1 'Number of close prices found
            intCursorPosition1 = intStringPosition1 + Len(StringLookClose) 'New starting _
            position in json string
        End If
        
    Next i
    
    'StockArray is as large as cols and the number of dates and close prices that exist
    ReDim StockArray(1 To CountStringOccurances, 1 To cols)
    
    'Reset starting positions since they variables were used previously
    intCursorPosition1 = 1
    intCursorPosition2 = 1
    intCursorPosition3 = 1
    
    'Loop through every row of StockArray to specific find the closing price values and _
    date values
    For i = LBound(StockArray) To UBound(StockArray, 1)
        intStringPosition3 = InStr(intCursorPosition3, json, StringLookPrice)
        intStringPosition1 = InStr(intCursorPosition1, json, StringLookClose) 'Find closing price position
        intStringPosition2 = InStr(intCursorPosition2, json, StringLookDate) 'Find date for closing price position
        
        'When there are no more closing prices then the loop can end
        If intStringPosition1 = 0 Then
            Exit For
        Else
            If intCursorPosition3 = 1 Then
                posStart = intStringPosition3 + Ploc 'Starting position of close price value
                posEnd = InStr(posStart, json, """") 'Finds the end of close price value
                strClose = Mid(json, posStart, posEnd - posStart) 'Extract value of close price
                Price = strClose 'Input close price into array
            End If
            
            posStart = intStringPosition1 + CPloc 'Starting position of close price value
            posEnd = InStr(posStart, json, """") 'Finds the end of close price value
            strClose = Mid(json, posStart, posEnd - posStart) 'Extract value of close price
            StockArray(i, 2) = strClose 'Input close price into array
            
            posStart = intStringPosition2 - Dloc 'Starting position of date value
            posEnd = InStr(posStart, json, """") 'Finds the end of date value
            strClose = Mid(json, posStart, posEnd - posStart) 'Extract value of date
            StockArray(i, 1) = strClose 'Input date into array
            
            'Move starting positions ahead of previous close price location
            intCursorPosition1 = intStringPosition1 + Len(StringLookClose)
            intCursorPosition2 = intStringPosition2 + Len(StringLookDate)
            If intCursorPosition3 = 1 Then
                intCursorPosition3 = intStringPosition3 + Len(StringLookPrice)
            End If

        End If
        
    Next i
    'Adds stock symbol, and 3 column headings to Stock Data worksheet _
    in a location determined by Col
    Cells(Row, Col).Value = Stock
    Cells(Row + 1, Col).Value = "Date"
    Cells(Row + 1, Col + 1).Value = "Adjusted Close"
    Cells(Row + 1, Col + 2).Value = "Return"
    
    'Put StockArray into the worksheet under the title headings
    SDSheet.Cells(Row + 2, Col).Resize(UBound(StockArray), UBound(StockArray, 2)).Value = StockArray

    'Add a new column to determine the return for each data and redefine array to _
    incorporate the new format with the deleted columns
    SDArray = SDSheet.UsedRange
    Col = UBound(SDArray, 2) + 1
    If CorT = True Then
        Tlist(Trow, Inclusion) = "Y"
'        Col = UBound(SDArray, 2) + 1 ' placing for where each table of stock data will appear
    End If
    Application.DisplayAlerts = False
    Application.DisplayAlerts = True
Else
'    SDSheet.Range(Cells(Row, Col), Cells(Row + 5, Col + 3)).Delete
    If CorT = True Then
        Tlist(Trow, Inclusion) = "N"
    End If

End If

End Sub

Sub Delete_NoData_Cells()
'Deletes rows of pricing data, for every stock(for easier comparability), where there is no pricing data
Dim SDArray As Variant
Dim SDrow As Integer, SDcol As Integer
Dim Row As Integer, Col As Integer
Dim SDSheet As Worksheet

Row = 1
Col = 1
Set SDSheet = Sheets("Stock Data")


SDArray = SDSheet.UsedRange 'define the sheet containing the stock data
For SDcol = LBound(SDArray) To UBound(SDArray, 2) 'for each stock on this page
    If IsEmpty(SDArray(Row, SDcol)) = False Then 'finds when a cell contains strings, not numeric
        For SDrow = LBound(SDArray) + 2 To UBound(SDArray, 1) 'loop through each row of historical price data
            If SDrow > UBound(SDArray) Then 'Prevents and infinite loop
                Exit For
            ElseIf IsEmpty(SDArray(SDrow, SDcol + 1)) = True And IsEmpty(SDArray(SDrow, SDcol)) = False Then
                Cells(SDrow, SDcol + 2).EntireRow.Delete 'delete row (will affect every stock pricing data)
                SDArray = SDSheet.UsedRange 'redefine array so that it wont try to delete the same row multiple times
                SDrow = SDrow - 1 'prevents an forward step to next cell, incase the next cell is also empty
            ElseIf SDArray(SDrow, SDcol + 1) = 0 And IsEmpty(SDArray(SDrow, SDcol)) = False Then
                Cells(SDrow, SDcol + 2).EntireRow.Delete 'delete row (will affect every stock pricing data)
                SDArray = SDSheet.UsedRange 'redefine array so that it wont try to delete the same row multiple times
                SDrow = SDrow - 1 'prevents an forward step to next cell, incase the next cell is also empty
            ElseIf IsEmpty(SDArray(SDrow, SDcol + 1)) = True And IsEmpty(SDArray(SDrow, SDcol)) = True Then
                Cells(SDrow, SDcol + 2).EntireRow.Delete 'delete row (will affect every stock pricing data)
                SDArray = SDSheet.UsedRange 'redefine array so that it wont try to delete the same row multiple times
                SDrow = LBound(SDArray) + 2 'prevents a forward step to next cell, incase the next cell is also empty

            End If
        Next SDrow

    End If
Next SDcol

End Sub

Sub Return_Variance()
Dim SDArray As Variant
Dim SDrow As Integer, SDcol As Integer
Dim Row As Integer, Col As Integer
Dim SDSheet As Worksheet
Dim MaxRow As Integer

Row = 1
Col = 1
Set SDSheet = Sheets("Stock Data")
SDSheet.Select
'define array of worksheet containing stock data
SDArray = SDSheet.UsedRange
MaxRow = 0

'Loop to run through every stock and determine its return
For SDcol = LBound(SDArray) To UBound(SDArray, 2)
    If SDArray(2, SDcol) = "Return" Then
        For SDrow = LBound(SDArray) + 2 To UBound(SDArray, 1) - 1 'Goes to the second last _
        position in the array
            'Determines return
            SDArray(SDrow, SDcol) = SDArray(SDrow, SDcol - 1) / SDArray(SDrow + 1, SDcol - 1) - 1

        Next SDrow
    End If
Next SDcol

'Put Array with return values back into worksheet
SDSheet.Cells(1, 1).Resize(UBound(SDArray), UBound(SDArray, 2)).Value = SDArray

For SDrow = LBound(SDArray) + 2 To UBound(SDArray, 1)
    For SDcol = LBound(SDArray) To UBound(SDArray, 2)
        If IsEmpty(SDArray(SDrow, SDcol)) = True Then
            MaxRow = SDrow
            Exit For
        End If
    Next SDcol
    If MaxRow <> 0 Then Exit For
Next SDrow

'loop through the first row of columns on worksheet to identify stocks
For SDcol = LBound(SDArray) To UBound(SDArray, 2)

    'if a stock is present, finds it's mean return and standard deviation
    If IsNumeric(Cells(Row, SDcol)) = False Then
        Cells(Row, SDcol + 1).Value = WorksheetFunction.Average(Range(Cells(Row + 2, SDcol + 2), Cells(UBound(SDArray, 1) - 1, SDcol + 2)))
        Cells(Row, SDcol + 2).Value = WorksheetFunction.Var_S(Range(Cells(Row + 2, SDcol + 2), Cells(UBound(SDArray, 1) - 1, SDcol + 2)))

    End If
Next SDcol

End Sub

Sub AllocationPeriod()
Dim SDSheet As Worksheet 'Stock Data worksheet
Dim DateCol As Integer 'The space between columns containing the date value
Dim SDrow As Integer, SDcol As Integer 'Variables for rows and columns in for loops
Dim i As Integer 'Control starting location for analyzing date strings
Dim SDArray As Variant 'Array of stock data worksheet
Dim objdate1 As Date 'Allows comparison of dates
Dim objdate2 As Date, Allper As Integer
Dim SLSheet As Worksheet, DayCount As Integer

Set SDSheet = Sheets("Stock Data")
Set SLSheet = Sheets("Stock List")
SDArray = SDSheet.UsedRange

Allper = SLSheet.Cells(4, 2).Value
objdate1 = CDate(SDArray(LBound(SDArray, 1) + 2, 1))
objdate2 = DateAdd("m", -Allper, objdate1)

DayCount = 0
For SDrow = LBound(SDArray) + 2 To UBound(SDArray, 1)
    If DateDiff("d", objdate2, CDate(SDArray(SDrow, 1))) < 0 Then
        Exit For
    Else
        DayCount = DayCount + 1
    End If
Next SDrow
SLSheet.Cells(5, 2).Value = DayCount
End Sub

Sub FixDates()
'Scrubs data so that the dates align with each other, and deletes stock data that cannot be compared _
reasonably with other stocks
Dim SDSheet As Worksheet 'Stock Data worksheet
Dim DateCol As Integer 'The space between columns containing the date value
Dim SDrow As Integer, SDcol As Integer 'Variables for rows and columns in for loops
Dim i As Integer 'Control starting location for analyzing date strings
Dim SDArray As Variant 'Array of stock data worksheet
Dim objdate1 As Date 'Allows comparison of dates
Dim objdate2 As Date
Dim Inclusion As Integer 'Column containing a string deciding whether a stock will be _
used in the calculation for finding market portfolio
Dim SLSheet As Worksheet 'Stock List worksheet
Dim SLrow As Integer, SLcol As Integer 'Row and column variables for loops
Dim SLArray As Variant 'Array fo stock list worksheet
Dim Stock As String 'Name of stock

'Define variable objects and put the worksheets associated with them into arrays
Set SLSheet = Sheets("Stock List")
Set SDSheet = Sheets("Stock Data")
SDArray = SDSheet.UsedRange
SLArray = SLSheet.UsedRange

SDSheet.Select
i = 1 'First date column is 1
DateCol = 3 'Space between date columns
Inclusion = 3 'Column deciding inclusion in calculations

'Loop through every row containing dates in Stock Data worksheet form SDArray
For SDrow = LBound(SDArray, 1) + 2 To UBound(SDArray, 1)
    'If a value exists in the date column
    If IsEmpty(SDArray(SDrow, i)) = False Then
        'Put the date into an object so it can be compared
        objdate1 = CDate(SDArray(SDrow, i))
        'Loop through the dates in the same row from other stocks
        For SDcol = i To UBound(SDArray, 2) - 2 Step DateCol
            'Ensures the number of columns contained in the array is not exceeded
            If SDcol > UBound(SDArray, 2) Then
                Exit For
            End If
            'If a date value exists for a stock
            If IsEmpty(SDArray(SDrow, SDcol)) = False Then
                'Put the date into an object so it can be compared with objdate1
                objdate2 = CDate(SDArray(SDrow, SDcol))
                'If the date from the first column is in the future compared to the date from the other stock being compared
                If objdate1 > objdate2 Then
                    'If the days between the two dates is small(<3)
                    If DateDiff("d", objdate2, objdate1) <= 3 Then
                        'Insert a blank row
                        Range(Cells(SDrow, SDcol), Cells(SDrow, SDcol + 2)).Insert shift:=xlDown
                        SDSheet.Cells(SDrow, SDcol).Value = objdate1 ' Put future date in compared stock's date column
                        SDSheet.Cells(SDrow, SDcol + 1).Value = Cells(SDrow + 1, SDcol + 1).Value ' Put previous price in compared stock's price column
                    Else
                        'If the days between the two dates is large(>3)
                        Stock = SDArray(1, SDcol) 'Find the stock
                        'Loop through rows of Stock List worksheet
                        For SLrow = LBound(SLArray) To UBound(SLArray, 1)
                            'When the stock is found the column marking inclusion will be changed to ensure _
                            the stock is not included in the market portfolio calculation
                            If SLArray(SLrow, 1) = Stock Then
                                SLSheet.Cells(SLrow, Inclusion).Value = "N"
                                Exit For
                            End If
                        Next SLrow
                        'Delete the data for the stock since it wont be included in the portoflio calculation
                        Range(Cells(1, SDcol), Cells(UBound(SDArray, 1), SDcol + 2)).Delete
                        'Reset column location
                        SDcol = i

                    End If
                    'Redefine array to include changes
                    SDArray = SDSheet.UsedRange
                ElseIf objdate1 < objdate2 Then
                    'If the days between the two dates is small(<3)
                    If DateDiff("d", objdate1, objdate2) <= 3 Then
                        'Insert a blank row
                        Range(Cells(SDrow, i), Cells(SDrow, i + 2)).Insert shift:=xlDown
                        SDSheet.Cells(SDrow, i).Value = objdate2 ' Put compared stock's future date in initial date column
                        SDSheet.Cells(SDrow, i + 1).Value = Cells(SDrow + 1, i + 1).Value ' Put previous price in initial stock's price column
                        'Redefine array and put new date as the intial comparison date
                        SDArray = SDSheet.UsedRange
                        objdate1 = CDate(SDArray(SDrow, i))
                    'If the days between the two dates is large(>3)
                    Else
                        Stock = SDArray(1, i) 'Find the stock
                        'Loop through rows of Stock List worksheet
                        For SLrow = LBound(SLArray) To UBound(SLArray, 1)
                            'When the stock is found the column marking inclusion will be changed to ensure _
                            the stock is not included in the market portfolio calculation
                            If SLArray(SLrow, 1) = Stock Then
                                SLSheet.Cells(SLrow, Inclusion).Value = "N"
                            End If
                        Next SLrow
                        'Move the initial comparison date to the next column
                        i = i + DateCol
                        SDArray = SDSheet.UsedRange
                    End If
                End If
            End If


        Next SDcol
    Else
        'If the data does not exist for the initial comaprison column then shift to the right to the next _
        column containing dates
        Do Until IsEmpty(SDArray(SDrow, i)) = False Or i > UBound(SDArray, 2)
            i = i + DateCol
        Loop
    End If

Next SDrow

'Deletes the rows that may only have a few stocks with a particular date
Do Until IsEmpty(SDArray(UBound(SDArray, 1), ColBegin)) = False
    Range(Cells(UBound(SDArray, 1), ColBegin), Cells(UBound(SDArray, 1), UBound(SDArray, 2))).Delete
    SDArray = SDSheet.UsedRange
Loop

End Sub

Sub DeleteExistingPortfolioData()
Dim SLSheet As Worksheet
Dim SLArray As Variant, Srow As Integer, Scol As Integer
Dim SearchAR As String

Set SLSheet = Sheets("Stock List")
SLArray = SLSheet.UsedRange

SearchAR = "Actual Return"

SLSheet.Select
For Srow = LBound(SLArray) To UBound(SLArray, 1)
    For Scol = LBound(SLArray) To UBound(SLArray, 2)
        If SLArray(Srow, Scol) = SearchAR Then
            Range(Cells(Srow + 1, Scol), Cells(UBound(SLArray, 1), UBound(SLArray, 2))).Delete
            Range(Cells(Tablebegin + 1, ColBegin), Cells(UBound(SLArray, 1), UBound(SLArray, 2))).ClearFormats
            Exit For
        End If
    Next Scol
Next Srow

Range(Cells(1, 1), Cells(5, 2)).Interior.Color = xlNone

End Sub
